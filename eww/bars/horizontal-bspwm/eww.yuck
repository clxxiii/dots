(defwindow horizontal-bspwm
  :monitor 0
  :geometry (geometry :x "6px"
                      :y "6px"
                      :width "99.4%"
                      :height "40px"
                      :anchor "top left")
  :stacking "fg"
  :reserve (struts :distance "46px" :side "top")
  :windowtype "normal"
  :focusable true
  :hexpand false
  (centerbox
    :class 'opaque bar ${binding_state.change}'
    :space-evenly "false"
    :visible {window.container.fullscreen_mode == 0}
    :orientation 'h'
  (h-top)
  (empty)
  (h-bottom)
    )
)

(defpoll current-desktop
  :interval "0.2s"
  `bspc query -T --desktop`)

(defwidget h-bottom []
  (box 

    :orientation "h"
    :halign "center"
    :spacing 5
    :space-evenly "false"
    :halign "end"
    (h-widgets)
    (h-times)
    ))

(defwidget h-top []
  (box
    :space-evenly "false"
    :spacing 10
    (h-workspaces)
    (h-circles)
    (tomato)
    )
  )

(defwidget h-circles []
  (box
    :orientation "h"
    :spacing 10
    (circle-widget 
      :value {EWW_CPU.avg}
      :class "cpu"
      :name "CPU"
      :icon "󰻠"
      )
    (circle-widget 
      :value {EWW_RAM.used_mem_perc}
      :class "ram"
      :name "RAM"
      :icon "󰘚")
    (circle-widget 
      :value {EWW_DISK["/"].used_perc}
      :class "disk"
      :name "Disk"
      :icon "󰋊"
      )
  )
)

(defwidget tomato []
  (box
    :class "tomato"
    :valign "center"
    :orientation "h"
  {tomato-time}
    )
  )

(defwidget h-workspaces []
  (box :class "h-workspaces"
       :orientation "h"
       :valign "center"
       :halign "start"
    (for ws in shown_workspaces
      (button 
        :class {ws == current-desktop.name ? "active" : ""}
        :onclick "bspc desktop -f ${ws}"
      )
    )
  )
)

(defwidget h-widgets []
  (box :class "h-widgets"
       :orientation "h"
       :valign "center"
       :spacing 20
       :halign "start"
       :space-evenly "false"
    (h-volume)
    (h-brightness)
    (h-bat)
    (h-wifi)
    ))

(defwidget h-wifi []
  (box
    :class "wifi widget"
    :halign "center"
    :tooltip `${wifi-name}`
    `${wifi-icon}`
  )
)

(defwidget h-bat []
  (box
    :class "bat widget"
    :tooltip `Battery: ${battery_per}%`
    :valign "center"
    :spacing 5
    :space-evenly "false"
    {battery_icon}
  (progress
    :value {battery_per}
    :orientation "h"
    :valign "center"
    )
  )
)


(defwidget h-times []
  (box :class "h-time"
       :orientation "h"
       :valign "center"
       :spacing 2
       :halign "end"
       :tooltip {date}
    (label :text {hour})
    (label :text {minute})
    (label :text {second})
  )
)


(defwidget circle-widget [value class name icon]
    (overlay
        :class {class}
        :tooltip `${name} Usage: ${round(value,1)}%`
      (circular-progress
        :value {value}
        :class "circle"
        :thickness 4
        :start-at 25
        :height 30
        :width 30
        )
      (label :text {icon})
      )
  )


(defwidget debug [] 
  (box
    (label :text ``)
    )
  )
